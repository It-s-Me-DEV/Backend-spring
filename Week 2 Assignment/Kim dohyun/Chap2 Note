### 02장 스프링 부트 3 시작하기
# 스프링의 등장
    대규모 복잡한 데이터를 관리하는 엔터프라이즈 애플리케이션의 등장으로, 성능과 안정성, 보안이 중요해짐. 스프링 프레임워크의 등장으로 높은 수준의 서버 성능, 안정성, 보안을 제공하여 개발자가 기능 개발에만 집중하도록 지원.

## 스프링 부트
 # 스프링 부트의 필요성
    스프링은 설정이 복잡하여 사용이 어려움.
 # 주요 특징
    내장 WAS로 독립 실행 가능
    스프링 부트 스타터로 의존성 관리 간편화
    XML 설정 없이 자바 코드로 설정 가능
    JAR 파일로 배포 가능
    스프링 액츄에이터를 통한 모니터링

 # 스프링 vs. 스프링 부트
    구성의 차이: 스프링은 수동 구성, 스프링 부트는 자동 로드.
    내장 WAS: 스프링은 외부 WAS 필요, 스프링 부트는 내장 WAS 제공.
## 스프링 콘셉트 공부하기
 # 제어의 역전 (IoC)
    객체의 생성과 관리를 프레임워크가 담당.
    예시: 클래스 A에서 클래스 B 객체를 직접 생성하는 대신, 스프링 컨테이너에서 관리, 제공
 # 의존성 주입 (DI)
    객체 간의 의존 관계를 외부에서 주입하는 방식.
    예시: @Autowired 애너테이션을 사용하여 클래스 A에서 B 객체를 주입받음.
 # 빈과 스프링 컨테이너
    빈: 스프링 컨테이너가 관리하는 객체, @Component 애너테이션으로 등록 가능.
    스프링 컨테이너: 빈을 생성하고 관리    
 # 관점 지향 프로그래밍 (AOP)
    핵심 관점과 부가 관점을 분리하여 개발하는 방식. 로직을 모듈화 하여 변경과 확장에 유연한 대응이 가능함.
 # 이식 가능한 서비스 추상화 (PSA)
    다양한 기술을 일관된 방식으로 사용할 수 있도록 제공하는 인터페이스.


 # 애너테이션
    소스코드에 다른 프로그램을 위한 정보를 포함하기 위한 표식
